var host = 'http://127.0.0.1:8080';$(document).ready(function(){    ticTacToeClient.connect();    $('#connect').click(function (){        ticTacToeClient.logIn($('#loginName').val());    });    $('#createGame').click(function(){        ticTacToeClient.createGame($('#gameName').val());    });    $('#gamesOnlineList').click(function (e){        var el = e.target,            gameName = $(el).attr('data-game');        if(!!gameName) {            ticTacToeClient.joinToGame(gameName);        }    });        $('#ticTacToeTable').click(function(e){        var el = $(e.target);        if(el.text() == '') {            ticTacToeClient.makeMove(el.attr('data-game-x'), el.attr('data-game-y'));        }    });});var templatesBuilder = {    buildUsersList: function (data){        if(!!data && !!data.users) {            var usersList = [],                u = data.users;            usersList.length = 1000;            for(var key in u) {                if(u.hasOwnProperty(key)) {                    usersList.push('<tr><td>');                    usersList.push(u[key]);                    usersList.push('</td></tr>');                }            }            $('#usersOnlineList').html(usersList.join(''));        } else {            $('#usersOnlineList').html('<tr><td>No users online</td></tr>');        }    },    buildGamesList: function (data) {        if(!!data && !!data.games) {            var gamesList = [],                g = data.games,                gamesCount = 0;            gamesList.length = 1000;            for(var key in g) {                if(g.hasOwnProperty(key) && g[key].isAvailable){                    gamesCount++;                    gamesList.push('<tr data-game="');                        gamesList.push(g[key].id);                        gamesList.push('"><td data-game="');                        gamesList.push(g[key].id);                        gamesList.push('">');                    gamesList.push(g[key].user);                    gamesList.push('</td><td data-game="');                        gamesList.push(g[key].id);                        gamesList.push('">');                    gamesList.push(g[key].name);                    gamesList.push("</td></tr>");                }            }            if(gamesCount > 0) {                $('#gamesOnlineList').html(gamesList.join(''));                $('.gameListContainer').show();            }        } else {            $('.gameListContainer').hide();        }    } };var ticTacToeClient = (function(){    var socket,        created,        gameName,        userName,        turn;        function connect() {        socket = io.connect(host);        socket.on('connect', function (){             created = true;            console.log('connected');                        socket.on('userloggedin', function(data){                $('.tab').hide();                $('#username').text(data.name);                userName = data.name;                $('.gameCreateScreen').show();                templatesBuilder.buildUsersList(data);                templatesBuilder.buildGamesList(data);            });            socket.on('onLogInError', function (data){                $('.control-group.login-group').addClass('error');                $('.control-group.login-group .control-label').text(data.msg);            });            socket.on('usersListChanged', templatesBuilder.buildUsersList);            socket.on('gamesListChanged', templatesBuilder.buildGamesList);            socket.on('gameHosted', function (data){                $('.tab').hide();                $('.gameCreatedScreen').show().find('.username').text(data.game.user);                $('.gameCreatedScreen .gameName').text(data.game.name);            });            socket.on('gameStarted', function (data){                $('.tab').hide();                var container = $('.gameProgressScreen');                gameName = data.name                container.show();                container.find('.user').text(data.isMaster ? data.user : data.opponent);                container.find('.opponent').text(!data.isMaster ? data.user : data.opponent);                container.find('.gameStatus').text(userName == data.turn ? 'your turn' : 'wait for opponent');                turn = data.turn;            });            socket.on('onMove', function (data){                turn = data.turn;                $('#ticTacToeTable td[data-game-x="'+data.x+'"][data-game-y="'+data.y+'"]').text(data.isMaster ? 'X' : 'O');                $('.gameProgressScreen .gameStatus').text(userName == turn ? 'your turn' : 'wait for opponent');            });            socket.on('gameOver', function (data){                $('.gameProgressScreen .gameStatus').text(data.msg);            });        });    }    function logIn(userName){        if(created && !!socket) {            if(!!userName) {                socket.emit('login', {name: userName});            }        }    }        function createGame(gameName){        if(created && !!socket) {            if(!gameName) {                $('.control-group.create-server-group').addClass('error')                .find('.control-label').text('Please fill in the name')            } else {                socket.emit('createGame', {gameName: gameName});            }        }    }        function joinToGame(gameName){        if(!!gameName){            socket.emit('connectToGame', {gameName: gameName});        } else {            alert('gameName could not be empty');        }    }        function makeMove(x, y){        socket.emit('makeMove', {gameName: gameName, userName: userName, x: x, y: y});    }    return {    connect: connect,    logIn: logIn,    createGame: createGame,    joinToGame: joinToGame,    makeMove: makeMove};}());